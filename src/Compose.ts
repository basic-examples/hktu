import { InvokeFind } from './array/Find';
import { InvokeMap } from './array/Map';
import { Nth } from './array/Nth';
import { Fn } from './Fn';
import { Invoke } from './Invoke';
import { Not } from './Not';
import { Pipe } from './Pipe';
import { InvokeUnwrapOr } from './result';
import { IfInvoking } from './utils/IfInvoking';
import { Input } from './utils/Input';
import { IsAssignable } from './value/IsAssignable';
import { WrapBox } from './value/WrapBox';

export interface Compose<
  K1 extends Fn<unknown, unknown>,
  K2 extends Fn<K1['out'], unknown> = never,
  K3 extends Fn<K2['out'], unknown> = never,
  K4 extends Fn<K3['out'], unknown> = never,
  K5 extends Fn<K4['out'], unknown> = never,
  K6 extends Fn<K5['out'], unknown> = never,
  K7 extends Fn<K6['out'], unknown> = never,
  K8 extends Fn<K7['out'], unknown> = never,
  K9 extends Fn<K8['out'], unknown> = never,
  K10 extends Fn<K9['out'], unknown> = never,
  K11 extends Fn<K10['out'], unknown> = never,
  K12 extends Fn<K11['out'], unknown> = never,
  K13 extends Fn<K12['out'], unknown> = never,
  K14 extends Fn<K13['out'], unknown> = never,
  K15 extends Fn<K14['out'], unknown> = never,
  K16 extends Fn<K15['out'], unknown> = never,
  K17 extends Fn<K16['out'], unknown> = never,
  K18 extends Fn<K17['out'], unknown> = never,
  K19 extends Fn<K18['out'], unknown> = never,
  K20 extends Fn<K19['out'], unknown> = never,
  K21 extends Fn<K20['out'], unknown> = never,
  K22 extends Fn<K21['out'], unknown> = never,
  K23 extends Fn<K22['out'], unknown> = never,
  K24 extends Fn<K23['out'], unknown> = never,
  K25 extends Fn<K24['out'], unknown> = never,
  K26 extends Fn<K25['out'], unknown> = never,
  K27 extends Fn<K26['out'], unknown> = never,
  K28 extends Fn<K27['out'], unknown> = never,
  K29 extends Fn<K28['out'], unknown> = never,
  K30 extends Fn<K29['out'], unknown> = never,
  K31 extends Fn<K30['out'], unknown> = never,
  K32 extends Fn<K31['out'], unknown> = never,
  K33 extends Fn<K32['out'], unknown> = never,
  K34 extends Fn<K33['out'], unknown> = never,
  K35 extends Fn<K34['out'], unknown> = never,
  K36 extends Fn<K35['out'], unknown> = never,
  K37 extends Fn<K36['out'], unknown> = never,
  K38 extends Fn<K37['out'], unknown> = never,
  K39 extends Fn<K38['out'], unknown> = never,
  K40 extends Fn<K39['out'], unknown> = never,
  K41 extends Fn<K40['out'], unknown> = never,
  K42 extends Fn<K41['out'], unknown> = never,
> extends Fn<
    K1['in'],
    ComposeOutput<
      K1,
      K2,
      K3,
      K4,
      K5,
      K6,
      K7,
      K8,
      K9,
      K10,
      K11,
      K12,
      K13,
      K14,
      K15,
      K16,
      K17,
      K18,
      K19,
      K20,
      K21,
      K22,
      K23,
      K24,
      K25,
      K26,
      K27,
      K28,
      K29,
      K30,
      K31,
      K32,
      K33,
      K34,
      K35,
      K36,
      K37,
      K38,
      K39,
      K40,
      K41,
      K42
    >
  > {
  out: this extends Record<'in_raw', infer I extends K1['in']>
    ? Pipe<
        I,
        K1,
        K2,
        K3,
        K4,
        K5,
        K6,
        K7,
        K8,
        K9,
        K10,
        K11,
        K12,
        K13,
        K14,
        K15,
        K16,
        K17,
        K18,
        K19,
        K20,
        K21,
        K22,
        K23,
        K24,
        K25,
        K26,
        K27,
        K28,
        K29,
        K30,
        K31,
        K32,
        K33,
        K34,
        K35,
        K36,
        K37,
        K38,
        K39,
        K40,
        K41,
        K42
      >
    : ComposeOutput<
        K1,
        K2,
        K3,
        K4,
        K5,
        K6,
        K7,
        K8,
        K9,
        K10,
        K11,
        K12,
        K13,
        K14,
        K15,
        K16,
        K17,
        K18,
        K19,
        K20,
        K21,
        K22,
        K23,
        K24,
        K25,
        K26,
        K27,
        K28,
        K29,
        K30,
        K31,
        K32,
        K33,
        K34,
        K35,
        K36,
        K37,
        K38,
        K39,
        K40,
        K41,
        K42
      >;
}

type ComposeOutput<
  K1 extends Fn<unknown, unknown>,
  K2 extends Fn<K1['out'], unknown> = never,
  K3 extends Fn<K2['out'], unknown> = never,
  K4 extends Fn<K3['out'], unknown> = never,
  K5 extends Fn<K4['out'], unknown> = never,
  K6 extends Fn<K5['out'], unknown> = never,
  K7 extends Fn<K6['out'], unknown> = never,
  K8 extends Fn<K7['out'], unknown> = never,
  K9 extends Fn<K8['out'], unknown> = never,
  K10 extends Fn<K9['out'], unknown> = never,
  K11 extends Fn<K10['out'], unknown> = never,
  K12 extends Fn<K11['out'], unknown> = never,
  K13 extends Fn<K12['out'], unknown> = never,
  K14 extends Fn<K13['out'], unknown> = never,
  K15 extends Fn<K14['out'], unknown> = never,
  K16 extends Fn<K15['out'], unknown> = never,
  K17 extends Fn<K16['out'], unknown> = never,
  K18 extends Fn<K17['out'], unknown> = never,
  K19 extends Fn<K18['out'], unknown> = never,
  K20 extends Fn<K19['out'], unknown> = never,
  K21 extends Fn<K20['out'], unknown> = never,
  K22 extends Fn<K21['out'], unknown> = never,
  K23 extends Fn<K22['out'], unknown> = never,
  K24 extends Fn<K23['out'], unknown> = never,
  K25 extends Fn<K24['out'], unknown> = never,
  K26 extends Fn<K25['out'], unknown> = never,
  K27 extends Fn<K26['out'], unknown> = never,
  K28 extends Fn<K27['out'], unknown> = never,
  K29 extends Fn<K28['out'], unknown> = never,
  K30 extends Fn<K29['out'], unknown> = never,
  K31 extends Fn<K30['out'], unknown> = never,
  K32 extends Fn<K31['out'], unknown> = never,
  K33 extends Fn<K32['out'], unknown> = never,
  K34 extends Fn<K33['out'], unknown> = never,
  K35 extends Fn<K34['out'], unknown> = never,
  K36 extends Fn<K35['out'], unknown> = never,
  K37 extends Fn<K36['out'], unknown> = never,
  K38 extends Fn<K37['out'], unknown> = never,
  K39 extends Fn<K38['out'], unknown> = never,
  K40 extends Fn<K39['out'], unknown> = never,
  K41 extends Fn<K40['out'], unknown> = never,
  K42 extends Fn<K41['out'], unknown> = never,
> = InvokeUnwrapOr<
  ToTupleWithOutput['out'],
  never,
  InvokeFind<
    Not<
      Compose3<
        Nth<[Fn<unknown, unknown>, unknown], 0>,
        WrapBox<Fn<unknown, unknown>>,
        IsAssignable<[Fn<unknown, unknown>], [never]>
      >
    >,
    InvokeMap<
      ToTupleWithOutput,
      [
        K42,
        K41,
        K40,
        K39,
        K38,
        K37,
        K36,
        K35,
        K34,
        K33,
        K32,
        K31,
        K30,
        K29,
        K28,
        K27,
        K26,
        K25,
        K24,
        K23,
        K22,
        K21,
        K20,
        K19,
        K18,
        K17,
        K16,
        K15,
        K14,
        K13,
        K12,
        K11,
        K10,
        K9,
        K8,
        K7,
        K6,
        K5,
        K4,
        K3,
        K2,
        K1,
      ]
    >
  >
>[1];

interface ToTupleWithOutput
  extends Fn<Fn<unknown, unknown>, [Fn<unknown, unknown>, unknown]> {
  out: IfInvoking<
    this,
    [Input<this>, Input<this>['out']],
    [Fn<unknown, unknown>, unknown]
  >;
}

interface Compose3<
  K1 extends Fn<unknown, unknown>,
  K2 extends Fn<K1['out'], unknown>,
  K3 extends Fn<K2['out'], unknown>,
> extends Fn<K1['in'], K3['out']> {
  out: IfInvoking<
    this,
    Invoke<K3, Invoke<K2, Invoke<K1, Input<this>>>>,
    K3['out']
  >;
}
